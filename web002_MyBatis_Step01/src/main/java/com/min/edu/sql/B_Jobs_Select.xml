<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.min.edu.model.JobSelectDaoImpl">

<sql id="allColumn">
	SELECT	JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY
	FROM JOB j
</sql>

<!-- 
	resultmMap 선언된 컬럼의 갯수를 다르게 하더ㅗ라,
	mapping 되는 컬럼명과 DTO의 setter 메소드를 연결해주기 위해서 사용
 -->
<resultMap type="JVO" id="JMap">
	<!--column은 쿼리의 컬럼 / property는 type의 setter 메소드명 -->
	<result column="FIRST_NAME" property="job_title"/>
	<result column="SALARY" property="max_salary"/>
</resultMap>

<resultMap type="JVO" id="PMap">
	<result column="ID" property="job_id"/>
	<result column="TITLE" property="job_title"/>
</resultMap>

<!-- 
	전달되는 prameter 타입에 따라서 사용방법이 달라짐
	-primitive 타입의 경우에는 객체 클래스에 getter/setter가 가지고 있지 않기 때문에 판단 할 수 없다
	-primitive 타입은 변수가 정해져 있지 않은 값만 전송받는다
	-myBatis에서 3.x부터는 parameterType을 작성하지 않아도 ojbect로 받아서 처리해주기 때문에 생략이 가능
	-myBatis에서 3.x부터는 java.lang.Integer -> int 혹은 Integer로만 작성해도 동작됨
 -->
	<select id="select01"
				parameterType="java.lang.String"
				resultType="java.lang.Integer">
				SELECT MAX_SALARY 
				FROM JOB j
				WHERE JOB_ID = #{X}
	</select>
	<!-- 
		Primitive 타입의 parameter 작성, mybatis에서는 parameter Type을 작성하지않아도 됨
		결과는 VO로 받음
		Sql문 작성시 반복되는 쿼리문장은 <sql>로 선언하고 사용시 <include refid=''>를 통해서 사용 할 수 있다
	 -->
	<select id="select02" resultType="JVO">
		<include refid="allColumn"/>
			WHERE JOB_ID = #{job_id}
	</select>
	
	<!-- 
		마냑 쿼리의 컬럼명이 mapping되어 있는 DTO/VO와 다를 경우에 해결 방법은
		1.타입이 유사한 DTO에 Mapping을 정의하여 사용한다
		컬럼의 Alias를 사용함 A <-> A, A<->B
				SELECT FIRST_NAME AS JOB_ID,
		LAST_NAME AS JOB_TITLE,
		EMPLOYEE_ID AS MIN_SALARY,
		SALARY AS MAX_SALARY
		2. myBatis 문법인 resultmap을 사용하여 처리
		① Mapping 되는 컬럼명과 setter명이 다른 경우
		② 쿼리의 결과의 일부분만 Mapping해서 결고라르 가져가기
	 -->
	<select id="select03" resultMap="JMap">
		SELECT FIRST_NAME,
		LAST_NAME,
		EMPLOYEE_ID,
		SALARY
		FROM EMPLOYEES e 
		WHERE EMPLOYEE_ID = #{ID}
	</select>
	<!-- 
		resultType의 java.util.map 
		map키와 값이 동시에 입력이 되어야 한다
		실행 메소드는 selectMap("키가되는 컬럼", Namespace,Parameter)
		반환 객체는 selectMap의 타입의 의해서 정의 됩니다
		Map<String,JobVo> 이였다면 쿼리 컬럼의 자동으로 jobVo에 매핑되고
		컬럼의 결과가 없다면 생성되지않는다
	-->
	<select id="select04" 
					resultType = "java.util.Map">
		<include refid="allColumn"/>
	</select>
	<!-- 
		parameter를 여러개 받는 방법
		DTO/Vo getter를 통해서 여러개의 arguments를 받음
		#{job_jd}은 JobVo의 getJob_id()를 호출하게 됨
	 -->
	<select id="select05" resultType="JVO">
		<include refid="allColumn"/>
		WHERE JOB_ID = #{job_id}
			AND JOB_TITLE = #{job_title}
	</select>
	<!-- 
		parameterType을 키:값 형태인 java.util.Map으로 처리 했음
		*주의* Map의 경우 SQL문장에서 사용했던 변수 이름으로 바인딩 되기 때문에 반드시 확인
		결과인 resultMap은 COLUMN명은 대문자, 매핑되는 자바의 setter는 소문자 작성
	 -->
	<select id="select06" resultMap="PMap" parameterType="java.util.Map">
		SELECT PLAYER_NAME ||'('||BACK_NO||')' AS ID,
		TEAM_ID TITLE
		FROM PLAYER
		WHERE PLAYER_ID=#{pid}
	</select>
	
	<!-- 
		CDATA 처리 문자열이 컴파일 되지 않도록 한다
		CDATA 처리 되는 문법은 Entitytag로 대체 할 수 있다
		Html,XML 등과 같은 markup LANGUAGE에서는 <표시는 마크업의 시작을 알리는 tag이기 떄문에 문법적 오류가 발생
	 -->
	<select id="select07" 
			parameterType = "java.lang.Object"
			resultType="JVo">
		<include refid="allColumn"/>
	 <![CDATA[WHERE MIN_SALARY < #{sal}]]>
	</select>
</mapper>
